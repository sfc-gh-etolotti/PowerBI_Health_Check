
--Total Queries
SELECT COUNT(*) AS JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
;

--Power BI - Snowflake Query Execution Times
SELECT CASE
    WHEN TOTAL_ELAPSED_TIME/1000 BETWEEN 0 AND 10 THEN '0-10 sec'
    WHEN TOTAL_ELAPSED_TIME/1000 BETWEEN 10 AND 30 THEN '10-30 sec'    
    WHEN TOTAL_ELAPSED_TIME/1000 BETWEEN 30 AND 60 THEN '30-60 sec'  
    WHEN TOTAL_ELAPSED_TIME/60000 < 5 THEN '1-5 minutes'
    WHEN TOTAL_ELAPSED_TIME/60000 < 10 THEN '5-10 minutes'
    WHEN TOTAL_ELAPSED_TIME/60000 < 30 THEN '10-30 minutes'
    WHEN TOTAL_ELAPSED_TIME/60000 < 60 THEN '30-60 minutes'
    ELSE '> 60 minutes'
    END Time,
    COUNT(*) JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY ALL;    

--Top Power BI Users
SELECT USER_NAME, COUNT(*) AS JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY USER_NAME
ORDER BY JOBS DESC;

--Top Power BI WH
SELECT WAREHOUSE_NAME, TOOL, COUNT(*) AS JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY ALL
ORDER BY JOBS DESC
;

--Power BI - Snowflake Query Compilation Times 
SELECT CASE 
    WHEN DUR_COMPILING < 1000 THEN 'A < 1 sec'
    WHEN DUR_COMPILING < 2000 THEN 'B 1-2 sec'
    WHEN DUR_COMPILING < 3000 THEN 'C 2-3 sec'
    WHEN DUR_COMPILING < 4000 THEN 'D 3-4 sec'
    WHEN DUR_COMPILING < 5000 THEN 'E 4-5 sec'
    ELSE 'F > 5 sec'
    END as "Compilation Time",
    COUNT(*)
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY ALL
 ;    

 
--Power BI Jobs
SELECT WAREHOUSE_NAME, TOOL, COUNT(*) AS JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY ALL
ORDER BY JOBS DESC
LIMIT 10;

--All Client Jobs (Top Power BI Warehouses)
WITH TOP_PBI_WH AS(
SELECT WAREHOUSE_NAME, COUNT(*) AS PBI_JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY ALL
ORDER BY PBI_JOBS DESC
LIMIT 10
)

SELECT 
        TOP_PBI_WH.WAREHOUSE_NAME,
        TOOL,
        SUM(QUERIES) AS JOBS   
FROM TOP_PBI_WH 
INNER JOIN PBIHealthCheck.JobData.POWERBI_CUSTOMER_WH_OVERLAP overlap
    ON TOP_PBI_WH.WAREHOUSE_NAME = overlap.WAREHOUSE_NAME
GROUP BY ALL
;
/*
SELECT WAREHOUSE_NAME, TOOL, SUM(JOBS)
FROM TEMP.KSMITH.POWERBI_CUSTOMER_WH_OVERLAP
WHERE SALESFORCE_ACCOUNT_NAME = :ksmith_powerbi_salesforce_account_name
GROUP BY ALL
ORDER BY WAREHOUSE_NAME ;
*/

--Table Access
SELECT TABLE_VIEW_NAME, WAREHOUSE_NAME,
    COUNT(DISTINCT QUERY_ID) JOBS
FROM PBIHealthCheck.JobData.POWERBI_TABLE_ACCESS_HISTORY
GROUP BY ALL
ORDER BY JOBS DESC, TABLE_VIEW_NAME, WAREHOUSE_NAME
LIMIT 1000;

--Tables Queried by > 1 Warehouse
WITH WH_MULTIPLE_TABLE AS(
SELECT 
    TABLE_VIEW_NAME, 
    COUNT(DISTINCT WAREHOUSE_NAME) WAREHOUSES
FROM PBIHealthCheck.JobData.POWERBI_TABLE_ACCESS_HISTORY
GROUP BY ALL
HAVING WAREHOUSES > 1
ORDER BY 2 DESC
LIMIT 50
)

SELECT 
    table_access.TABLE_VIEW_NAME, 
    table_access.WAREHOUSE_NAME,
    COUNT(DISTINCT QUERY_ID) JOBS
FROM PBIHealthCheck.JobData.POWERBI_TABLE_ACCESS_HISTORY table_access
INNER JOIN WH_MULTIPLE_TABLE multiple_table
    ON multiple_table.TABLE_VIEW_NAME = table_access.TABLE_VIEW_NAME
GROUP BY ALL
ORDER BY 3 DESC
;


--% Scanned From Cache
SELECT CASE
    WHEN percentage_scanned_from_cache < .25 THEN 'A 0-25%'
    WHEN percentage_scanned_from_cache < .50 THEN 'B 25-50%'
    WHEN percentage_scanned_from_cache < .75 THEN 'C 50-75%'
    ELSE 'D 75-100%' END AS PERCENTAGE_SCANNED_FROM_CACHE,
COUNT(*)
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY 1
ORDER BY 1;

--Most WH Queuing
SELECT WAREHOUSE_NAME, to_date(start_time) as Usage_Date, SUM(DUR_QUEUED_LOAD) DUR_QUEUED
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY WAREHOUSE_NAME, Usage_Date
ORDER BY DUR_QUEUED DESC;

--Low Cache Usage
SELECT SQL_TEXT, SQL_TEXT_HASH , MIN(ROWS_PRODUCED), COUNT(DISTINCT QUERY_ID), MAX(to_date(start_time)) CREATED_ON, MIN(TOTAL_ELAPSED_TIME/1000), MAX(TOTAL_ELAPSED_TIME/1000), MIN(percentage_scanned_from_cache) 
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY SQL_TEXT, SQL_TEXT_HASH
HAVING MIN(percentage_scanned_from_cache) < .001
AND MIN(TOTAL_ELAPSED_TIME/1000) > .001
and  MIN(ROWS_PRODUCED) > 0
--AND MIN(XP_DURATION_MS) > 100
ORDER BY 3 DESC
LIMIT 1000;

--RowCount Dist
SELECT CASE 
    WHEN ROWS_PRODUCED = 0 THEN 'A 0'
    WHEN ROWS_PRODUCED <10000 THEN 'B < 10k'
    WHEN ROWS_PRODUCED <100000 THEN 'C 10k - 100k'
    WHEN ROWS_PRODUCED <1000000 THEN 'D 100k - 1m'
    WHEN ROWS_PRODUCED <10000000 THEN 'E 1m - 10m'
    WHEN ROWS_PRODUCED <100000000 THEN 'F 10m - 100m'  
    WHEN ROWS_PRODUCED <1000000000 THEN 'G 100m - 1b'
    ELSE 'H > 1b'
    END
 AS ROWS_PRODUCED,

COUNT(*) AS COUNT
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE EXECUTION_STATUS = 'SUCCESS'
AND ROWS_PRODUCED > 0
GROUP BY ALL
ORDER BY ROWS_PRODUCED; 

--Highest Rowcount Queries
SELECT DISTINCT SQL_TEXT, COUNT(*) AS COUNT, SQL_TEXT_HASH, MAX(ROWS_PRODUCED) NUM_ROWS, MAX(to_date(start_time)) CREATED_ON, 
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE ROWS_PRODUCED > 0
AND EXECUTION_STATUS = 'SUCCESS'
GROUP BY ALL
ORDER BY NUM_ROWS DESC
LIMIT 50;

--Queries Spilling to Local/Remote Disk
SELECT EXECUTION_STATUS, WAREHOUSE_NAME, QUERY_ID, SQL_TEXT, TOTAL_ELAPSED_TIME/60000 as TOTAL_DURATION_MIN, GB_SPILLED_TO_LOCAL_STORAGE, GB_SPILLED_TO_REMOTE_STORAGE, PARTITIONS_SCANNED, PARTITIONS_TOTAL, PARTITION_SCAN_RATIO, ROWS_PRODUCED
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE (GB_SPILLED_TO_LOCAL_STORAGE > 0
OR GB_SPILLED_TO_REMOTE_STORAGE > 0)
ORDER BY GB_SPILLED_TO_LOCAL_STORAGE DESC
LIMIT 100;

--Longest Running Queries (minutes)
SELECT EXECUTION_STATUS, QUERY_ID, SQL_TEXT, ERROR_MESSAGE, WAREHOUSE_NAME, TOTAL_ELAPSED_TIME/60000 as TOTAL_DURATION_MIN, GB_SPILLED_TO_LOCAL_STORAGE, GB_SPILLED_TO_REMOTE_STORAGE, PARTITIONS_SCANNED, PARTITIONS_TOTAL, PARTITION_SCAN_RATIO, 
to_date(start_time) as created_on, ERROR_CODE
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE ROWS_PRODUCED > 0
AND TOTAL_DURATION_MIN > 0
ORDER BY TOTAL_DURATION_MIN DESC
LIMIT 100;

--Power BI Execution Statuses
SELECT EXECUTION_STATUS, COUNT(*)
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY ALL
ORDER BY 1;

--Power BI Job Failures
SELECT COUNT(*)
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE EXECUTION_STATUS = 'FAIL';


--Power BI - Snowflake Execution Times - SQL Execution Canceled
SELECT CASE
    WHEN TOTAL_ELAPSED_TIME/60000 < 1 THEN '< 1 minute'
    WHEN TOTAL_ELAPSED_TIME/60000 < 5 THEN '1-5 minutes'
    WHEN TOTAL_ELAPSED_TIME/60000 < 10 THEN '5-10 minutes'
    WHEN TOTAL_ELAPSED_TIME/60000 < 30 THEN '10-30 minutes'
    WHEN TOTAL_ELAPSED_TIME/60000 < 60 THEN '30-60 minutes'
    ELSE '> 60 minutes'
    END Time,
    COUNT(*) JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE EXECUTION_STATUS = 'FAIL'
AND ERROR_CODE = '000604'
GROUP BY ALL;    

--Power BI Query Failures
SELECT EXECUTION_STATUS, ERROR_CODE, ERROR_MESSAGE, COUNT(*)
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE EXECUTION_STATUS = 'FAIL'
GROUP BY ALL
ORDER BY 4 DESC;

--Most Common Power BI Queries
SELECT SQL_TEXT, 
COUNT(*) AS JOBS,
MIN(TOTAL_ELAPSED_TIME/60000) MIN_DURATION_MINUTES,
MEDIAN(TOTAL_ELAPSED_TIME/60000) MEDIAN_DURATION_MINUTES,
MAX(TOTAL_ELAPSED_TIME/60000) MAX_DURATION_MINUTES
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY SQL_TEXT
ORDER BY JOBS DESC
LIMIT 100;

--Heaviest Micropartition Scans
SELECT QUERY_ID, 
SQL_TEXT,
PARTITIONS_SCANNED,
PARTITIONS_TOTAL,
PARTITION_SCAN_RATIO, 
ROWS_PRODUCED,
TOTAL_ELAPSED_TIME/60000 as total_duration_min
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE ROWS_PRODUCED > 0
AND PARTITION_SCAN_RATIO > 0.7
AND EXECUTION_STATUS = 'SUCCESS'
ORDER BY PARTITIONS_TOTAL DESC
LIMIT 100;

--TABLES & SCHEMAS
WITH HEAVY_SCAN_QUERIES AS (
SELECT 
QUERY_ID,
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE ROWS_PRODUCED > 0
AND PARTITION_SCAN_RATIO > 0.7
AND EXECUTION_STATUS = 'SUCCESS'
ORDER BY PARTITIONS_TOTAL DESC
LIMIT 1000)

SELECT 
    SPLIT_PART(TABLE_VIEW_NAME,'.',1) || '.' || SPLIT_PART(TABLE_VIEW_NAME,'.',2) AS ACCOUNT_DB_SCHEMA, 
    COUNT(DISTINCT t.QUERY_ID) AS JOBS
FROM HEAVY_SCAN_QUERIES scan
INNER JOIN PBIHealthCheck.JobData.POWERBI_TABLE_ACCESS_HISTORY t
    on scan.query_id = t.query_id
GROUP BY ALL 
ORDER BY JOBS DESC;

--QAS Eligible
SELECT 
    pbi.QUERY_ID, 
    to_date(start_time) as created_on,
    WAREHOUSE_NAME, 
    pbi.SQL_TEXT,
    partitions_scanned,
    partitions_total, 
    TOTAL_ELAPSED_TIME/60000 as TOTAL_DURATION_MIN,
        execution_status
FROM PBIHealthCheck.JobData.POWERBI_QAS_ELIGIBLE qas
INNER JOIN PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS pbi
        on qas.QUERY_ID = pbi.QUERY_ID
ORDER BY TOTAL_ELAPSED_TIME/1000 DESC;

--Power BI Client Job Counts
SELECT CLIENT,
    COUNT(*) JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY ALL;  

--Client Drivers Last 7 Days
SELECT CLIENT_APP_ID, CLIENT, USER_NAME,
    COUNT(*) JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
WHERE to_date(start_time) >= dateadd(d,-45,sysdate())
GROUP BY ALL;

--Import vs DQ
SELECT CLIENT, TAG,
    COUNT(*) JOBS
FROM PBIHealthCheck.JobData.POWERBI_CUSTOMER_HEALTH_CHECKS
GROUP BY ALL;    